import { existsSync, readFileSync, writeFileSync } from "node:fs";
import { join } from "node:path";
import { dump } from "js-yaml";

import {
  type MelosPackage,
  autoGeneratedLabelComment,
  fetchGitRootDirPath,
  fetchMelosPackageList,
  resolveAutoGeneratedIndex,
} from "./utils";

/**
 * Generates the package part of `.github/labeler.yml`
 */
function main(): void {
  const rootDir = fetchGitRootDirPath();
  console.log(`rootDir: ${rootDir}`);

  const labelerFile = join(rootDir, ".github", "labeler.yml");
  if (!existsSync(labelerFile)) {
    throw new Error(
      "Required files not found.\nCreate `.github/labeler.yml` and run it again.",
    );
  }
  console.log(`labelerFile: ${labelerFile}`);

  // Replace YAML content while preserving comment lines
  writeFileSync(
    labelerFile,
    [
      resolvePreGeneratedContent(
        readFileSync(labelerFile, "utf-8").split("\n"),
      ),
      generateLabelerContent(rootDir, fetchMelosPackageList()),
    ].join("\n"),
  );

  console.log("Labels updated successfully.");
}

/**
 * Resolves the manually generated part before auto-generation
 */
function resolvePreGeneratedContent(labelsContentLines: string[]): string {
  const autoGeneratedIndex = resolveAutoGeneratedIndex(labelsContentLines);
  return labelsContentLines.slice(0, autoGeneratedIndex).join("\n");
}

/**
 * Auto-generates content from packages managed by Melos
 */
function generateLabelerContent(
  rootDir: string,
  melosPackageList: MelosPackage[],
): string {
  const generatedLabels = generatePackageLabelers(melosPackageList, rootDir);
  const melosPackageLabelersString = dump({ labels: generatedLabels });

  // Improve readability by adding line breaks between YAML elements
  const formattedGenerateContent = [`  ${autoGeneratedLabelComment}`];
  for (const line of melosPackageLabelersString.split("\n")) {
    if (line.startsWith("labels:")) continue;
    if (line.startsWith("  -") && formattedGenerateContent.length !== 1) {
      formattedGenerateContent.push("");
    }
    formattedGenerateContent.push(line.replace(/\\\//g, "/"));
  }

  return formattedGenerateContent.join("\n");
}

/**
 * Generates a list of labeler elements
 */
function generatePackageLabelers(packages: MelosPackage[], rootDir: string) {
  return packages
    .map((pkg) => {
      const pkgPath = pkg.location.replace(`${rootDir}/`, "");
      const label = `package:${pkgPath}`;
      return {
        label,
        files: [`${pkgPath}/.+`],
      };
    })
    .sort((a, b) => a.label.localeCompare(b.label));
}

// Run the main function
main();
