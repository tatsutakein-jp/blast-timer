import { existsSync, readFileSync, writeFileSync } from "node:fs";
import { join } from "node:path";
import { dump, load } from "js-yaml";

import {
  type MelosPackage,
  autoGeneratedLabelComment,
  fetchGitRootDirPath,
  fetchMelosPackageList,
  resolveAutoGeneratedIndex,
} from "./utils";

/**
 * Generates the package part of `.github/labels.yml`
 */
function main(): void {
  const rootDir = fetchGitRootDirPath();
  console.log(`rootDir: ${rootDir}`);

  const labelsFile = join(rootDir, ".github", "labels.yml");
  if (!existsSync(labelsFile)) {
    throw new Error(
      "Required files not found.\nCreate `.github/labels.yml` and run it again.",
    );
  }
  console.log(`labelsFile: ${labelsFile}`);

  const labelsContentLines = readFileSync(labelsFile, "utf-8").split("\n");
  const autoGeneratedIndex = resolveAutoGeneratedIndex(labelsContentLines);

  const preGeneratedContent = labelsContentLines
    .slice(0, autoGeneratedIndex)
    .join("\n");

  const generatedContent = generateLabelsContent(
    rootDir,
    labelsContentLines,
    autoGeneratedIndex,
    fetchMelosPackageList(),
  );

  const updatedContent = [
    preGeneratedContent,
    autoGeneratedLabelComment,
    generatedContent,
  ].join("\n");

  writeFileSync(labelsFile, updatedContent);

  console.log("Labels updated successfully.");
}

function generateLabelsContent(
  rootDir: string,
  labelsContentLines: string[],
  autoGeneratedIndex: number,
  melosPackageList: MelosPackage[],
): string {
  const existingGeneratedLabelsYaml = load(
    labelsContentLines
      .slice(autoGeneratedIndex)
      .join("\n"),
    // biome-ignore lint/suspicious/noExplicitAny: <explanation>
  ) as any[] | null;

  const generatedLineList = generatePackageLabels(
    melosPackageList,
    rootDir,
    existingGeneratedLabelsYaml,
  );

  const formattedGenerateContentLines: string[] = [];
  for (const line of generatedLineList) {
    if (line.startsWith("-") && formattedGenerateContentLines.length > 0) {
      formattedGenerateContentLines.push("");
    }
    formattedGenerateContentLines.push(line.replace(/\\\//g, "/"));
  }

  return formattedGenerateContentLines.join("\n");
}

function generateRandomColor(): string {
  const r = Math.floor(Math.random() * 256);
  const g = Math.floor(Math.random() * 256);
  const b = Math.floor(Math.random() * 256);

  return (
    r.toString(16).padStart(2, "0") +
    g.toString(16).padStart(2, "0") +
    b.toString(16).padStart(2, "0")
  );
}

function generatePackageLabels(
  packages: MelosPackage[],
  rootDir: string,
  // biome-ignore lint/suspicious/noExplicitAny: <explanation>
  existingGeneratedLabelsYaml: any[] | null,
): string[] {
  const generatedLabels = packages
    .map((pkg) => {
      const packageName = pkg.location.replace(`${rootDir}/`, "");
      const labelName = `package:${packageName}`;

      const existingLabel = existingGeneratedLabelsYaml?.find(
        // biome-ignore lint/suspicious/noExplicitAny: <explanation>
        (label) => (label as any).name === labelName,
        // biome-ignore lint/suspicious/noExplicitAny: <explanation>
      ) as any;

      const newLabel: Record<string, string> = {
        name: labelName,
        color: existingLabel?.color || generateRandomColor(),
        description:
          existingLabel?.description ||
          `${packageName.replace("/", " ")} package`,
      };

      if (existingLabel?.from_name) {
        newLabel.from_name = existingLabel.from_name;
      }

      return newLabel;
    })
    .sort((a, b) => a.name.localeCompare(b.name));

  return dump(generatedLabels).split("\n");
}

// Run the main function
main();
